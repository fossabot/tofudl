// Copyright (c) The OpenTofu Authors
// SPDX-License-Identifier: MPL-2.0

package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path"
	"strconv"
	"strings"
	"text/template"

	"github.com/opentofu/tofudl/branding"
)

func main() {
	if err := runMain(); err != nil {
		log.Fatal(err)
	}
}

func runMain() error {
	file := ""
	flag.StringVar(&file, "file", file, "File to write to.")
	flag.Parse()

	dir := path.Join(os.TempDir(), "fake")
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}
	defer func() {
		_ = os.RemoveAll(dir)
	}()
	if err := os.WriteFile(path.Join(dir, "go.mod"), []byte(gomod), 0644); err != nil { //nolint:gosec //This is not sensitive.
		return err
	}
	if err := os.WriteFile(path.Join(dir, "main.go"), []byte(code), 0644); err != nil { //nolint:gosec //This is not sensitive.
		return err
	}

	cmd := exec.Command("go", "build", "-ldflags", "-s -w", "-o", "fake")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Dir = dir
	if err := cmd.Run(); err != nil {
		var exitErr *exec.ExitError
		if errors.As(err, &exitErr) {
			return fmt.Errorf("build failed (exit code %d)", exitErr.ExitCode())
		}
		return err
	}

	contents, err := os.ReadFile(path.Join(dir, "fake"))
	if err != nil {
		return err
	}

	tpl := template.New("")
	if tpl, err = tpl.Parse(templateText); err != nil {
		return err
	}

	parts := make([]string, len(contents))
	for i, b := range contents {
		if i%20 == 0 {
			parts[i] = "\n" + strconv.Itoa(int(b))
		} else {
			parts[i] = strconv.Itoa(int(b))
		}
	}
	contentsCode := "[]byte{" + strings.Join(parts, ", ") + "}"

	buf := &bytes.Buffer{}
	if err := tpl.Execute(buf, struct {
		Authors  string
		License  string
		Contents string
		File     string
	}{
		branding.SPDXAuthorsName,
		branding.SPDXLicense,
		contentsCode,
		file,
	}); err != nil {
		return err
	}

	if err := os.WriteFile(file+"~", buf.Bytes(), 0644); err != nil { //nolint:gosec //This is not sensitive.
		return err
	}
	if err := os.Rename(file+"~", file); err != nil {
		return err
	}
	return nil
}

var templateText = `// Copyright (c) {{ .Authors }}
// SPDX-License-Identifier: {{ .License }}

// Code generated by internal/tools/mockmirror-build-fake. DO NOT EDIT.

package mockmirror

//go:` + `generate go run github.com/opentofu/tofudl/internal/tools/mockmirror-build-fake -file {{ .File }}

const binaryContents = {{ .Contents }}
`

var code = `package main

func main() {
	print("Hello world!")
}
`

var gomod = `module fake

go 1.21`
